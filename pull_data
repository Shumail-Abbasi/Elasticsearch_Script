import requests
import json
from datetime import datetime, timedelta

# --- Config ---
ELASTIC_URL = "https://your-elasticsearch-url:9200"
API_KEY = "YOUR_BASE64_API_KEY"  # Base64 encoded "id:key"

HEADERS = {
    "Authorization": f"ApiKey {API_KEY}",
    "Content-Type": "application/json"
}

# --- Time range for 90 days ---
now = datetime.utcnow()
ninety_days_ago = now - timedelta(days=90)
time_filter = {
    "range": {
        "@timestamp": {
            "gte": ninety_days_ago.isoformat(),
            "lte": now.isoformat()
        }
    }
}

# --- Query builder ---
def build_query(source_fields, time_filter=None):
    query = {
        "_source": source_fields,
        "size": 10000,
        "query": {"match_all": {}}
    }
    if time_filter:
        query["query"] = time_filter
    return query

# --- Fetch function ---
def fetch_data(index, query):
    url = f"{ELASTIC_URL}/{index}/_search"
    resp = requests.post(url, headers=HEADERS, data=json.dumps(query), verify=False)
    resp.raise_for_status()
    return resp.json()["hits"]["hits"]

# --- Fetch from all indices ---
winsec_query = build_query(["host.name", "source.domain"], time_filter)
nac_query = build_query(["host.name", "host.mac", "host.os.family", "source.domain"])
fleet_query = build_query([
    "host.name", "host.ip", "last_checkin_status",
    "local_metadata.os.family", "local_metadata.os.full", "tags",
    "local_metadata.host.name"
])

winsec_data = fetch_data("windows_security", winsec_query)
nac_data = fetch_data("NAC_inventory", nac_query)
fleet_data = fetch_data("fleet_inventory", fleet_query)

# --- Collect and deduplicate names ---
all_names = set()

for doc in winsec_data:
    source_domain = doc["_source"].get("source", {}).get("domain")
    if source_domain:
        all_names.add(source_domain)

for doc in nac_data:
    source_domain = doc["_source"].get("source", {}).get("domain")
    if source_domain:
        all_names.add(source_domain)

for doc in fleet_data:
    host_name = doc["_source"].get("local_metadata", {}).get("host", {}).get("name")
    if host_name:
        all_names.add(host_name)

# --- Result ---
unique_names = sorted(all_names)
print(f"Total unique names: {len(unique_names)}")
print(unique_names)
